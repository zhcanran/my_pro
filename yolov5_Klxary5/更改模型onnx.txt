只保留batch维度为动态，其他为静态
export.py
line 143-148 -> 151-156
        # dynamic = {'images': {0: 'batch', 2: 'height', 3: 'width'}}  # shape(1,3,640,640)
        # if isinstance(model, SegmentationModel):
        #     dynamic['output0'] = {0: 'batch', 1: 'anchors'}  # shape(1,25200,85)
        #     dynamic['output1'] = {0: 'batch', 2: 'mask_height', 3: 'mask_width'}  # shape(1,32,160,160)
        # elif isinstance(model, DetectionModel):
        #     dynamic['output0'] = {0: 'batch', 1: 'anchors'}  # shape(1,25200,85)

        # 修改只保留batch维度为动态
        dynamic = {'images': {0: 'batch'}}  # shape(1,3,640,640)
        if isinstance(model, SegmentationModel):
            dynamic['output0'] = {0: 'batch', 1: 'anchors'}  # shape(1,25200,85)
            dynamic['output1'] = {0: 'batch', 2: 'mask_height', 3: 'mask_width'}  # shape(1,32,160,160)
        elif isinstance(model, DetectionModel):
            dynamic['output0'] = {0: 'batch'}  # shape(1,25200,85)

存在很多引用，将引用改成固定值,顺便将动态shape放置在batch维度，即便bs=-1
yolo.py
line62->63
            # bs, _, ny, nx = x[i].shape  # x(bs,255,20,20) to x(bs,3,20,20,85)
            bs, _, ny, nx = map(int,x[i].shape)  # x(bs,255,20,20) to x(bs,3,20,20,85)
            bs =-1
line 71 - 》 82
                anchor_grid = (self.anchors[i].clone()*self.stride[i].view(1, -1, 1, 1, 2))
                # if isinstance(self, Segment):  # (boxes + masks)
                #     xy, wh, conf, mask = x[i].split((2, 2, self.nc + 1, self.no - self.nc - 5), 4)
                #     xy = (xy.sigmoid() * 2 + self.grid[i]) * self.stride[i]  # xy
                #     wh = (wh.sigmoid() * 2) ** 2 * self.anchor_grid[i]  # wh
                #     y = torch.cat((xy, wh, conf.sigmoid(), mask), 4)
                # else:  # Detect (boxes only)
                #     xy, wh, conf = x[i].sigmoid().split((2, 2, self.nc + 1), 4)
                #     xy = (xy * 2 + self.grid[i]) * self.stride[i]  # xy
                #     wh = (wh * 2) ** 2 * self.anchor_grid[i]  # wh
                #     y = torch.cat((xy, wh, conf), 4)
                if isinstance(self, Segment):  # (boxes + masks)
                    xy, wh, conf, mask = x[i].split((2, 2, self.nc + 1, self.no - self.nc - 5), 4)
                    xy = (xy.sigmoid() * 2 + self.grid[i]) * self.stride[i]  # xy
                    wh = (wh.sigmoid() * 2) ** 2 * anchor_grid  # wh
                    y = torch.cat((xy, wh, conf.sigmoid(), mask), 4)
                else:  # Detect (boxes only)
                    xy, wh, conf = x[i].sigmoid().split((2, 2, self.nc + 1), 4)
                    xy = (xy * 2 + self.grid[i]) * self.stride[i]  # xy
                    wh = (wh * 2) ** 2 * anchor_grid  # wh
                    y = torch.cat((xy, wh, conf), 4)
                z.append(y.view(bs, self.na * nx * ny, self.no))